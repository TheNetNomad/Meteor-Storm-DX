	[number match level address z80 print disk full map]
BEGIN
	SET BIOS_BEEP = ^h00C0;
	
	SET BIOS_GTSTCK = ^h00D5;
	SET BIOS_GTTRIG = ^h00D8
	SET BIOS_GTPDL  = ^h00DE;
	SET BIOS_GTPAD  = ^h00DB;
	
	SET BIOS_RDVDP  = ^h013E;
	SET BIOS_WRTVDP = ^h0047;
	SET BIOS_WRTVRM = ^h004D;
	SET BIOS_CHGMOD = ^h005F;
	SET BIOS_CHGCLR = ^h0062;
	SET BIOS_CLRSPR = ^h0069;
	SET BIOS_INIGRP = ^h0072;
	SET BIOS_CALPAT = ^h0084;
	SET BIOS_CALATR = ^h0087;
	SET BIOS_GRPPRT = ^h008D;
	SET BIOS_POSIT  = ^h00C6
	SET BIOS_INIT32 = ^h006F;

	SET GEMINI_PREP   = ^hA000;
    SET GEMINI_BGMON  = ^hA003;
	SET GEMINI_BGMOFF = ^hA006;
    SET GEMINI_PAUSE  = ^hA009;
    SET GEMINI_HOOK   = ^hA00C;
	
	SET DOS_ENASLT = ^h0024;
	SET DOS_CALLF = ^h0030;
	
	EXTERNAL BYTE TRGFLG ADDRESS ^hF3E8;

	EXTERNAL BYTE MAINROM_SLOTID ADDRESS ^hFCC1;
	
	EXTERNAL BYTE FORCLR ADDRESS ^hF3E9;
	EXTERNAL BYTE BAKCLR ADDRESS ^hF3EA;
	EXTERNAL BYTE BDRCLR ADDRESS ^hF3EB;
	EXTERNAL BYTE LINL32 ADDRESS ^hF3AF;
	
	EXTERNAL BYTE EXINPUT_DEVICE ADDRESS ^h8000;

	STRING INSTR LENGTH 2;
	EXTERNAL BYTE INSTR_BYTE ADDRESS #INSTR;

	BYTE INCHAR;
	STRING INBUFFER 512;
	POINTER TO BYTE BLOAD_POINTER;
	BYTE GEMINI_PREP_RC;
	
	FILE FILE_GFMRAM DISK TEXT RECORD INCHAR BUFFER INBUFFER VALUE "GFMRAM.BIN";
	FILE FILE_BGM DISK TEXT RECORD INCHAR BUFFER INBUFFER VALUE "METBGM.BIN";
	
	MOVE 15 TO FORCLR;
	MOVE 1 TO BAKCLR;
	MOVE 1 TO BDRCLR;
	MOVE 29 TO LINL32;
	
	CALL SUB_INIT_MAINROM1;
	
	MCALL DOS_CALLF;
	BYTE MAINROM1;
	WORD ADR VALUE BIOS_INIT32;

	
	DISPLAY "_NetNomad Presents...";        
	DISPLAY "   ~FF~ ~FF~ ~FF~~FF~~FF~ ~FF~~FF~~FF~ ~FF~~FF~~FF~  ~FF~  ~FF~~FF~";      
	DISPLAY "   ~FF~~FF~~FF~ ~FF~    ~FF~  ~FF~   ~FF~ ~FF~ ~FF~ ~FF~";     
	DISPLAY "   ~FF~~FF~~FF~ ~FF~~FF~   ~FF~  ~FF~~FF~  ~FF~ ~FF~ ~FF~~FF~";      
	DISPLAY "   ~FF~ ~FF~ ~FF~    ~FF~  ~FF~   ~FF~ ~FF~ ~FF~ ~FF~";     
	DISPLAY "   ~FF~ ~FF~ ~FF~~FF~~FF~  ~FF~  ~FF~~FF~~FF~  ~FF~  ~FF~ ~FF~";     
	DISPLAY "";	
	DISPLAY "     ~FF~~FF~ ~FF~~FF~~FF~  ~FF~  ~FF~~FF~  ~FF~ ~FF~";         
	DISPLAY "    ~FF~    ~FF~  ~FF~ ~FF~ ~FF~ ~FF~ ~FF~~FF~~FF~";         
	DISPLAY "     ~FF~   ~FF~  ~FF~ ~FF~ ~FF~~FF~  ~FF~~FF~~FF~";         
	DISPLAY "      ~FF~  ~FF~  ~FF~ ~FF~ ~FF~ ~FF~ ~FF~ ~FF~";         
	DISPLAY "    ~FF~~FF~   ~FF~   ~FF~  ~FF~ ~FF~ ~FF~ ~FF~";         
	DISPLAY "";							
	DISPLAY "          ~FF~~FF~  ~FF~ ~FF~";                 
	DISPLAY "          ~FF~ ~FF~ ~FF~ ~FF~";                 
	DISPLAY "          ~FF~ ~FF~  ~FF~";                 
	DISPLAY "          ~FF~ ~FF~ ~FF~ ~FF~";                                 
	DISPLAY "          ~FF~~FF~  ~FF~ ~FF~"; 
	LABEL_DEVICE_OPTIONS:
	DISPLAY "";
	DISPLAY "SELECT CONTROLLER:";
	DISPLAY "1 - PADDLE   2 - JOYPAD";
	DISPLAY "3 - KEYBOARD 4 - MOUSE (MSX2)"
	{--DISPLAY "3 - KEYBOARD 4 - MOUSE (MSX2)5 - SATURN 3D PAD";
	
	ACCEPT "==> ", INSTR;
	MOVE INSTR_BYTE TO EXINPUT_DEVICE;
	SUBTRACT 48 FROM EXINPUT_DEVICE;
	
	IF EXINPUT_DEVICE > 4 THEN
		DISPLAY "INVALID SELECTION";
		DISPLAY "";
		GOTO LABEL_DEVICE_OPTIONS;
	FI;
	
	IF EXINPUT_DEVICE = 0 THEN
		DISPLAY "INVALID SELECTION";
		DISPLAY "";
		GOTO LABEL_DEVICE_OPTIONS;
	FI;
	
	DISPLAY "NOW LOADING...";
	
	{--CALL SUB_LOAD_HISCORE;
	
	
	OPEN FILE_GFMRAM;
	MOVE ^hA000 TO BLOAD_POINTER;
	WHILE BLOAD_POINTER < ^hC000;
		READ FILE_GFMRAM;
		MOVE INCHAR TO @BLOAD_POINTER;
		ADD 1 TO BLOAD_POINTER;
	OD;
	CLOSE FILE_GFMRAM;
	
	OPEN FILE_BGM;
	MOVE ^hC000 TO BLOAD_POINTER;
	WHILE BLOAD_POINTER < ^hD600;
		READ FILE_BGM;
		MOVE INCHAR TO @BLOAD_POINTER;
		ADD 1 TO BLOAD_POINTER;
	OD;
	CLOSE FILE_BGM;
	
	MCALL GEMINI_PREP GIVING ,,,GEMINI_PREP_RC;
	
	IF GEMINI_PREP_RC = 2 THEN
		DISPLAY "SFG-0X OR FM-PAC NOT FOUND!";
		GOTO END;
	FI;
	
	
	GOTO START;

	SUB_INIT_MAINROM1:
		MOVE MAINROM_SLOTID TO MAINROM1;
	EXIT;

	{---------------------------------}
	{-- PLACE OUR PROGRAM AT ^h8000 --}
	{---------------------------------}
	LABEL_RESERVE_SPACE:
	STRING RESERVE_SPACE LENGTH (^h8000 - #LABEL_RESERVE_SPACE);

	{---------------------------------}
	{-- DEFINES AND WORKING STORAGE --}
	{---------------------------------}
	
	EXTERNAL BYTE CLOC   ADDRESS ^hF92A;
	EXTERNAL BYTE CMASK  ADDRESS ^hF92C;
	EXTERNAL BYTE ATRBYT ADDRESS ^hF3F2; 
	
	EXTERNAL BYTE CSRY   ADDRESS ^hF3DC;
	EXTERNAL BYTE CSRX   ADDRESS ^hF3DD;	
	EXTERNAL BYTE GRPACX ADDRESS ^hFCB7;
	EXTERNAL BYTE GRPACY ADDRESS ^hFCB9; 
	
	EXTERNAL WORD CGTABL ADDRESS ^h0004;
	
	
	EXTERNAL WORD T32NAM ADDRESS ^hF3BD 	{--2 	BASE(5) - SCREEN 1 name table
	EXTERNAL WORD T32COL ADDRESS ^hF3BF; 	{--2 	BASE(6) - SCREEN 1 color table
	EXTERNAL WORD T32CGP ADDRESS ^hF3C1; 	{--2 	BASE(7) - SCREEN 1 character pattern table
	EXTERNAL WORD T32ATR ADDRESS ^hF3C3; 	{--2 	BASE(8) - SCREEN 1 sprite attribute table
	EXTERNAL WORD T32PAT ADDRESS ^hF3C5; 	{--2 	BASE(9) - SCREEN 1 sprite pattern table

	EXTERNAL WORD GRPNAM ADDRESS ^hF3C7; 	{--2 	BASE(10) - SCREEN 2 name table
	EXTERNAL WORD GRPCOL ADDRESS ^hF3C9; 	{--2 	BASE(11) - SCREEN 2 color table
	EXTERNAL WORD GRPCGP ADDRESS ^hF3CB; 	{--2 	BASE(12) - SCREEN 2 character pattern table
	EXTERNAL WORD GRPATR ADDRESS ^hF3CD; 	{--2 	BASE(13) - SCREEN 2 sprite attribute table
	EXTERNAL WORD GRPPAT ADDRESS ^hF3CF; 	{--2 	BASE(14) - SCREEN 2 sprite pattern table

	EXTERNAL BYTE CLIKSW ADDRESS ^hF3DB;
	EXTERNAL WORD JIFFY  ADDRESS ^hFC9E;
	EXTERNAL BYTE STATFL ADDRESS ^hF3E7;
	{--EXTERNAL BYTE TRGFLG ADDRESS ^hF3E8;
    
	SET CALL_OPCODE = ^hCD;
	SET RET_OPCODE =  ^hC9;
	
	LABEL_INPUT_DEVICE:
	BYTE INPUT_DEVICE;

	EXTERNAL FIELD HTIMI_HOOK ADDRESS ^hFD9F LENGTH 5;
	FIELD OLD_HTIMI_HOOK 5;
	BYTE OLD_HTIMI_RET VALUE RET_OPCODE;
	FIELD NEW_HTIMI_HOOK 5;
	REDEFINE NEW_HTIMI_HOOK;
		RECORD NEW_HTIMI_HOOK_REC;
			BYTE NEW_HTIMI_COMMAND_CALL VALUE CALL_OPCODE;
			WORD NEW_HTIMI_COMMAND_ADDRESS VALUE VBLANK;
			BYTE NEW_HTIMI_COMMAND_RET VALUE RET_OPCODE;
			BYTE FILLER VALUE ^h00;
		ENDREC;
	ENDREDEF;
	
	EXTERNAL BYTE RG1SAV ADDRESS ^hF3E0;
	
	WORD RG1_WORDOUT;
	REDEFINE RG1_WORDOUT;
		RECORD RG1_REC;
			BYTE RG1_REG VALUE 1;
			BYTE RG1OUT;
		ENDREC;
	ENDREDEF;
	BYTE VBLANK_WAIT;

	BYTE SPRDAT00 VALUE ^h00;
	BYTE SPRDAT01 VALUE ^h01;
	BYTE SPRDAT02 VALUE ^h03;
	BYTE SPRDAT03 VALUE ^h01;
	BYTE SPRDAT04 VALUE ^h01;
	BYTE SPRDAT05 VALUE ^h01;
	BYTE SPRDAT06 VALUE ^h01;
	BYTE SPRDAT07 VALUE ^h03;
	BYTE SPRDAT08 VALUE ^h83;
	BYTE SPRDAT09 VALUE ^h87;
	BYTE SPRDAT0A VALUE ^hFF;
	BYTE SPRDAT0B VALUE ^hFF;
	BYTE SPRDAT0C VALUE ^h81;
	BYTE SPRDAT0D VALUE ^h81;
	BYTE SPRDAT0E VALUE ^h03;
	BYTE SPRDAT0F VALUE ^h07;
	BYTE SPRDAT10 VALUE ^h00;
	BYTE SPRDAT11 VALUE ^h80;
	BYTE SPRDAT12 VALUE ^hC0;
	BYTE SPRDAT13 VALUE ^h80;
	BYTE SPRDAT14 VALUE ^h80;
	BYTE SPRDAT15 VALUE ^h80;
	BYTE SPRDAT16 VALUE ^h80;
	BYTE SPRDAT17 VALUE ^hC0;
	BYTE SPRDAT18 VALUE ^hC1;
	BYTE SPRDAT19 VALUE ^hE1;
	BYTE SPRDAT1A VALUE ^hFF;
	BYTE SPRDAT1B VALUE ^hFF;
	BYTE SPRDAT1C VALUE ^h81;
	BYTE SPRDAT1D VALUE ^h81;
	BYTE SPRDAT1E VALUE ^hC0;
	BYTE SPRDAT1F VALUE ^hE0;
	BYTE SPRDAT20 VALUE ^h00;
	BYTE SPRDAT21 VALUE ^h00;
	BYTE SPRDAT22 VALUE ^h00;
	BYTE SPRDAT23 VALUE ^h00;
	BYTE SPRDAT24 VALUE ^h00;
	BYTE SPRDAT25 VALUE ^h00;
	BYTE SPRDAT26 VALUE ^h07;
	BYTE SPRDAT27 VALUE ^h0F;
	BYTE SPRDAT28 VALUE ^h1F;
	BYTE SPRDAT29 VALUE ^h3F;
	BYTE SPRDAT2A VALUE ^h7F;
	BYTE SPRDAT2B VALUE ^hFF;
	BYTE SPRDAT2C VALUE ^hFF;
	BYTE SPRDAT2D VALUE ^h7F;
	BYTE SPRDAT2E VALUE ^h1F;
	BYTE SPRDAT2F VALUE ^h07;
	BYTE SPRDAT30 VALUE ^h00;
	BYTE SPRDAT31 VALUE ^h00;
	BYTE SPRDAT32 VALUE ^h00;
	BYTE SPRDAT33 VALUE ^h00;
	BYTE SPRDAT34 VALUE ^h00;
	BYTE SPRDAT35 VALUE ^h00;
	BYTE SPRDAT36 VALUE ^hE0;
	BYTE SPRDAT37 VALUE ^hF0;
	BYTE SPRDAT38 VALUE ^hF8;
	BYTE SPRDAT39 VALUE ^hFC;
	BYTE SPRDAT3A VALUE ^hFE;
	BYTE SPRDAT3B VALUE ^hFF;
	BYTE SPRDAT3C VALUE ^hFF;
	BYTE SPRDAT3D VALUE ^hFE;
	BYTE SPRDAT3E VALUE ^hF8;
	BYTE SPRDAT3F VALUE ^hE0;

	POINTER TO BYTE DATA_POINTER;
	WORD VRAM_POINTER;
	WORD VBLANK_VRAM_POINTER;
	BYTE SKIP_DRAW;
	
	BYTE SPRITE_OFFSET_OUT; {-- sprite num * 4
	BYTE SPRITE_Y_OUT;
	BYTE SPRITE_X_OUT;
	BYTE SPRITE_PATTERN_OUT;
	BYTE SPRITE_COLOR_OUT;
	
	BYTE SHIP_X_OUT VALUE 128;
	BYTE METEOR1_Y_OUT VALUE 0;
	BYTE METEOR1_X_OUT VALUE (32 - 16);
	BYTE METEOR2_Y_OUT VALUE 47;
	BYTE METEOR2_X_OUT VALUE (96 - 16);
	BYTE METEOR3_Y_OUT VALUE 94;
	BYTE METEOR3_X_OUT VALUE (160 - 16);
	BYTE METEOR4_Y_OUT VALUE 141;
	BYTE METEOR4_X_OUT VALUE (224 - 16);
	
	BYTE COLLISION;
	BYTE TRIGGER_IN;
	BYTE STICK_IN;
	BYTE GAME_PAUSED;
	BYTE DEBOUNCE;
	
	SET METEOR_INITIAL_SPEED = 4;
	BYTE METEOR_SPEED VALUE METEOR_INITIAL_SPEED;
	WORD SPEED_COUNTER;
	
	{-- THE ORDER OF THE SCORE VARIABLES IS IMPORTANT... DO NOT INSERT ANYTHING IN BETWEEN
	FIELD GAME_OVER_MESSAGE LENGTH 10 VALUE "GAME  OVER";
	FIELD SCORE_MESSAGE LENGTH 5 VALUE "SCORE";
	FIELD HISCORE_MESSAGE LENGTH 7 VALUE "HISCORE";
	STRING OLD_SCORE_STR LENGTH 7;
	WORD SCORE;
	STRING SCORE_STR LENGTH 7;
	HISCORE_LABEL:
	WORD HISCORE;
	STRING HISCORE_STR LENGTH 7;
	POINTER TO BYTE SCORE_DIGIT_POINTER;
	BYTE SCORE_DIGIT;
	WORD OLD_HISCORE;
	
	WORD RANDWORK;
	EXTERNAL BYTE RANDBYTE ADDRESS #RANDWORK;
	WORD RANDSAVE;
	
	WORD LOOP_COUNTER;
	EXTERNAL BYTE LOW_LOOP_COUNTER ADDRESS #LOOP_COUNTER;
	
	SUB_SAFE_WRTVRM:
		BYTE PUSH_AF1 VALUE ^hF5;
		MOVE 1 TO SKIP_DRAW;
		BYTE POP_AF1 VALUE ^hF1;
		MCALL BIOS_WRTVRM;
		MOVE 0 TO SKIP_DRAW;
	EXIT;

	
	START:
	
	
	MCALL DOS_ENASLT USING ,,^h0000,MAINROM_SLOTID;
	
	{-----------------------------------}
	{-- INSTALL VBLANK HANDLER		  --}
	{-----------------------------------}
	
	DISABLE INTERRUPTS;
	MOVE HTIMI_HOOK TO OLD_HTIMI_HOOK;
	MOVE NEW_HTIMI_HOOK TO HTIMI_HOOK;
	ENABLE INTERRUPTS;
	
	MOVE 0 TO CLIKSW;
	
	{-----------------------------------}
	{-- INITIALIZE SCREEN AND SPRITES --}
	{-----------------------------------}
	RESTART:
	{--DISABLE INTERRUPTS;
	
	MCALL BIOS_CHGMOD USING ,,,1;
	MCALL BIOS_CLRSPR; {--CLRSPR
	
	
	
	{-- LOAD MSX FONT INTO VRAM 
	MOVE 1 TO SKIP_DRAW;
	MOVE CGTABL TO DATA_POINTER;
	MOVE T32CGP TO VRAM_POINTER;
	
	MOVE 0 TO LOOP_COUNTER;

	WHILE LOOP_COUNTER < ^h07FF;
		MOVE @DATA_POINTER TO SPRITE_OFFSET_OUT;
		MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,SPRITE_OFFSET_OUT;
		ADD 1 TO DATA_POINTER;
		ADD 1 TO VRAM_POINTER;
		ADD 1 TO LOOP_COUNTER;
	OD;
	
	MOVE T32NAM TO VRAM_POINTER;
	MOVE 0 TO LOOP_COUNTER;
	
	WHILE LOOP_COUNTER < ^h02FF;
		MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
		{--MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,LOW_LOOP_COUNTER;
		ADD 1 TO VRAM_POINTER;
		ADD 1 TO LOOP_COUNTER;
	OD;
	
	MOVE T32COL TO VRAM_POINTER;
	MOVE 0 TO LOOP_COUNTER;
	
	WHILE LOOP_COUNTER < ^h02FF;
		MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,^hF1;
		ADD 1 TO VRAM_POINTER;
		ADD 1 TO LOOP_COUNTER;
	OD;
	
	CALL SUB_DRAW_STARS;
	
	{-- LOAD SPRITES INTO VRAM
	MOVE #SPRDAT00 TO DATA_POINTER;
	MOVE T32PAT TO VRAM_POINTER;
	
	WHILE DATA_POINTER < #DATA_POINTER DO
		MOVE @DATA_POINTER TO SPRITE_OFFSET_OUT;
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_OFFSET_OUT;
		ADD 1 TO DATA_POINTER;
		ADD 1 TO VRAM_POINTER;
	OD;
	
	{-- SET SPRITE SIZE
	MOVE RG1SAV TO RG1OUT;
	OR RG1OUT WITH ^b00000010;
	MCALL BIOS_WRTVDP USING RG1_WORDOUT;
	
	{------------------
	{-- SPRITE SETUP --
	{------------------
	
	SPRITE_INIT:
	MOVE T32ATR TO VRAM_POINTER;
	
	{--SHIP
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,175;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SHIP_X_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,0;
	ADD 1 TO VRAM_POINTER;
	
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,13;
	ADD 1 TO VRAM_POINTER;
	
	{--METEOR 1
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR1_Y_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR1_X_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,5;
	ADD 1 TO VRAM_POINTER;
	
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,6;
	ADD 1 TO VRAM_POINTER;
	
	{--METEOR 2
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR2_Y_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR2_X_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,5;
	ADD 1 TO VRAM_POINTER;
	
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,6;
	ADD 1 TO VRAM_POINTER;
	
	{--METEOR 3
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR3_Y_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR3_X_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,5;
	ADD 1 TO VRAM_POINTER;
	
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,6;
	ADD 1 TO VRAM_POINTER;
	
	{--METEOR 4
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR4_Y_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,METEOR4_X_OUT;
	ADD 1 TO VRAM_POINTER;
		
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,5;
	ADD 1 TO VRAM_POINTER;
	
	MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,6;
	
	ENABLE INTERRUPTS;
	
	MCALL GEMINI_BGMON USING ,,^hC000;
	MOVE 0 TO DEBOUNCE;
	
	{----------}
	{-- MAIN --}
	{----------}
	MAIN:
	
	IF DEBOUNCE > 10 THEN
		CALL SUB_GET_TRIGGER;
		IF TRIGGER_IN = ^hFF THEN
			MCALL GEMINI_PAUSE;
			MOVE 0 TO DEBOUNCE;
			IF GAME_PAUSED > 0 THEN
				MOVE 0 TO GAME_PAUSED;
			ELSE	
				MOVE 1 TO GAME_PAUSED;
			FI;
		FI;
	ELSE 
		ADD 1 TO DEBOUNCE;
	FI;
	
	IF GAME_PAUSED <> 0 THEN
		GOTO WAIT;
	FI;
	
	MOVE STATFL TO COLLISION;
	AND COLLISION WITH ^b00100000;
	IF COLLISION > 0 THEN
		IF SCORE < 10
			GOTO LABEL_ESCAPE_COLLISION;
		FI;
		
		MCALL GEMINI_PAUSE;
		MOVE 1 TO SKIP_DRAW;
		
		DISABLE INTERRUPTS;
		MOVE T32NAM TO VRAM_POINTER;
		ADD ((32 * 5) + 11) TO VRAM_POINTER;
		MOVE #GAME_OVER_MESSAGE TO SCORE_DIGIT_POINTER;
		
		WHILE SCORE_DIGIT_POINTER < #SCORE_MESSAGE;
			MOVE @SCORE_DIGIT_POINTER TO SCORE_DIGIT;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,SCORE_DIGIT;
			ADD 1 TO VRAM_POINTER;
			ADD 1 TO SCORE_DIGIT_POINTER;
		OD;
		ENABLE INTERRUPTS;
		
		
		IF HISCORE > OLD_HISCORE
			MOVE HISCORE TO OLD_HISCORE;
			{--CALL SUB_SAVE_HISCORE;
		FI;
		
		GAME_OVER_LOOP:
		CALL SUB_GET_TRIGGER;
		IF TRIGGER_IN = ^hFF THEN
			DISABLE INTERRUPTS;
			MOVE T32ATR TO VRAM_POINTER;
			ADD 3 TO VRAM_POINTER;
			
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
			ADD 4 TO VRAM_POINTER;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
			ADD 4 TO VRAM_POINTER;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
			ADD 4 TO VRAM_POINTER;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
			ADD 4 TO VRAM_POINTER;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
			ADD 4 TO VRAM_POINTER;
			
			MOVE 0 TO SCORE;
			MOVE "      " TO SCORE_STR;
			MOVE "      " TO HISCORE_STR;
			MOVE METEOR_INITIAL_SPEED TO METEOR_SPEED;
			MOVE 0 TO SPEED_COUNTER;
			MOVE 0 TO METEOR1_Y_OUT;
			MOVE 120 TO SHIP_X_OUT;
			MOVE (32 - 16) TO METEOR1_X_OUT;
			MOVE 47 TO METEOR2_Y_OUT ;
			MOVE (96 - 16) TO METEOR2_X_OUT;
			MOVE 94 TO METEOR3_Y_OUT;
			MOVE (160 - 16) TO METEOR3_X_OUT;
			MOVE 141 TO METEOR4_Y_OUT;
			MOVE (224 - 16) TO METEOR4_X_OUT;
			
			MOVE T32NAM TO VRAM_POINTER;
			MOVE 0 TO LOOP_COUNTER;
			
			WHILE LOOP_COUNTER < ^h02FF;
				MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,0;
				ADD 1 TO VRAM_POINTER;
				ADD 1 TO LOOP_COUNTER;
			OD;
			
			CALL SUB_DRAW_STARS;
			GOTO SPRITE_INIT;
		FI;
		GOTO GAME_OVER_LOOP;
	FI;
	LABEL_ESCAPE_COLLISION:
	
	SWITCH ON INPUT_DEVICE:
		1:	MCALL BIOS_GTPDL USING ,,,1 GIVING ,,,SHIP_X_OUT;
		2:	BEGIN
				MCALL BIOS_GTSTCK USING ,,,1 GIVING ,,,STICK_IN;
		
				SWITCH ON STICK_IN:
					2 - 4: ADD 5 TO SHIP_X_OUT;
					6 - 8: SUBTRACT 5 FROM SHIP_X_OUT;
				ENDSWITCH;		
			END;
		3:	BEGIN
				MCALL BIOS_GTSTCK USING ,,,0 GIVING ,,,STICK_IN;
		
				SWITCH ON STICK_IN:
					2 - 4: ADD 5 TO SHIP_X_OUT;
					6 - 8: SUBTRACT 5 FROM SHIP_X_OUT;
				ENDSWITCH;		
			END;
		4: 	BEGIN
				MCALL BIOS_GTPAD USING ,,,12;
				MCALL BIOS_GTPAD USING ,,,13 GIVING ,,,STICK_IN;
				ADD STICK_IN TO SHIP_X_OUT;
			END;
	ENDSWITCH;
	
	IF SHIP_X_OUT < 5 THEN 
		MOVE 5 TO SHIP_X_OUT;
	FI;
				
	IF SHIP_X_OUT > 235 THEN 
		MOVE 235 TO SHIP_X_OUT;
	FI;	
	
	
	ADD METEOR_SPEED TO METEOR1_Y_OUT;
	ADD METEOR_SPEED TO METEOR2_Y_OUT;
	ADD METEOR_SPEED TO METEOR3_Y_OUT;
	ADD METEOR_SPEED TO METEOR4_Y_OUT;
	
	
	IF METEOR1_Y_OUT > 190 THEN
		MOVE 0 TO METEOR1_Y_OUT;
		CALL SUB_RANDOM_BYTE;
		MOVE RANDBYTE TO METEOR1_X_OUT;
	FI;
	
	IF METEOR2_Y_OUT > 190 THEN
		MOVE 0 TO METEOR2_Y_OUT;
		CALL SUB_RANDOM_BYTE;
		MOVE RANDBYTE TO METEOR2_X_OUT;
	FI;
	
	IF METEOR3_Y_OUT > 190 THEN
		MOVE 0 TO METEOR3_Y_OUT;
		CALL SUB_RANDOM_BYTE;
		MOVE RANDBYTE TO METEOR3_X_OUT;
	FI;
	
	IF METEOR4_Y_OUT > 190 THEN
		MOVE 0 TO METEOR4_Y_OUT;
		CALL SUB_RANDOM_BYTE;
		MOVE RANDBYTE TO METEOR4_X_OUT;
	FI;
	
	
	ADD 1 TO SCORE;
	CONVERT SCORE TO DECIMAL SCORE_STR;
	
	IF SCORE > HISCORE 
		MOVE SCORE TO HISCORE;
		MOVE SCORE_STR TO HISCORE_STR;
	FI;
	
	ADD 1 TO SPEED_COUNTER;
	IF SPEED_COUNTER = 1000 THEN
		MOVE 0 TO SPEED_COUNTER;
		ADD 1 TO METEOR_SPEED;
	FI;
	
	WAIT:
	CALL SUB_WAIT;
	
	GOTO MAIN;
	
	
	SUB_WAIT:
		MOVE 1 TO VBLANK_WAIT;
		ENABLE INTERRUPTS;
		WAIT_LOOP:
		IF VBLANK_WAIT <> 0 THEN 
			GOTO WAIT_LOOP;
		FI;
	EXIT;
	
	{----------------}
	{-- VBLANK ISR --}
	{----------------}
	VBLANK:
		BYTE PUSH_AF VALUE ^hF5;
	
		IF SKIP_DRAW = 0 THEN
			{-- MOVE SPRITES
			MOVE T32ATR TO VBLANK_VRAM_POINTER;
			ADD 1 TO VBLANK_VRAM_POINTER;
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,SHIP_X_OUT;
			ADD 3 TO VBLANK_VRAM_POINTER;
			
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR1_Y_OUT;
			ADD 1 TO VBLANK_VRAM_POINTER;
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR1_X_OUT;
			ADD 3 TO VBLANK_VRAM_POINTER;
			
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR2_Y_OUT;
			ADD 1 TO VBLANK_VRAM_POINTER;
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR2_X_OUT;
			ADD 3 TO VBLANK_VRAM_POINTER;
			
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR3_Y_OUT;
			ADD 1 TO VBLANK_VRAM_POINTER;
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR3_X_OUT;
			ADD 3 TO VBLANK_VRAM_POINTER;
			
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR4_Y_OUT;
			ADD 1 TO VBLANK_VRAM_POINTER;
			MCALL #SUB_SAFE_WRTVRM USING ,,VBLANK_VRAM_POINTER,METEOR4_X_OUT;
			ADD 3 TO VBLANK_VRAM_POINTER;
		
			MOVE T32NAM TO VBLANK_VRAM_POINTER;
			ADD 32 TO VBLANK_VRAM_POINTER;
			MOVE #SCORE_STR TO SCORE_DIGIT_POINTER;
			
			WHILE SCORE_DIGIT_POINTER < #HISCORE
				MOVE @SCORE_DIGIT_POINTER TO SCORE_DIGIT;
				MCALL BIOS_WRTVRM USING ,,VBLANK_VRAM_POINTER,SCORE_DIGIT;
				ADD 1 TO VBLANK_VRAM_POINTER;
				ADD 1 TO SCORE_DIGIT_POINTER;
			OD;
			
			
			ADD 20 TO VBLANK_VRAM_POINTER;
			MOVE #HISCORE_STR TO SCORE_DIGIT_POINTER;
			
			WHILE SCORE_DIGIT_POINTER < #SCORE_DIGIT_POINTER
				MOVE @SCORE_DIGIT_POINTER TO SCORE_DIGIT;
				MCALL BIOS_WRTVRM USING ,,VBLANK_VRAM_POINTER,SCORE_DIGIT;
				ADD 1 TO VBLANK_VRAM_POINTER;
				ADD 1 TO SCORE_DIGIT_POINTER;
			OD;
		FI;
	
		
		
		
		MCALL GEMINI_HOOK;
	
		{--CALL ORIGINAL BIOS VBLANK ISR
		MOVE 0 TO VBLANK_WAIT;
		BYTE POP_AF VALUE ^hF1;
		CALL OLD_HTIMI_HOOK;
	EXIT;
	
	SUB_RANDOM_BYTE:
		ADD STICK_IN TO RANDWORK;
		MULTIPLY JIFFY BY RANDWORK GIVING RANDWORK;
		SUBTRACT JIFFY FROM RANDWORK;
		XOR RANDWORK WITH JIFFY;
		ADD STICK_IN TO RANDWORK;
		
		IF RANDBYTE < 5 THEN 
			MOVE 5 TO RANDBYTE;
		FI;
		
		IF RANDBYTE > 235 THEN 
			MOVE 235 TO RANDBYTE;
		FI;
	EXIT;
	
	
	
	SUB_PUT_SPRITE:
		MOVE T32ATR TO VRAM_POINTER;
		ADD SPRITE_OFFSET_OUT TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_Y_OUT;
		ADD 1 TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_X_OUT;
		ADD 1 TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_PATTERN_OUT;
		ADD 1 TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_COLOR_OUT;
		ADD 1 TO VRAM_POINTER;
		
	EXIT;
	
	SUB_MOVE_SPRITE:
		MOVE T32ATR TO VRAM_POINTER;
		ADD SPRITE_OFFSET_OUT TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_Y_OUT;
		ADD 1 TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,SPRITE_X_OUT;
		ADD 1 TO VRAM_POINTER;
	EXIT;
	
	SUB_DISABLE_SPRITE:
		MOVE T32ATR TO VRAM_POINTER;
		ADD SPRITE_OFFSET_OUT TO VRAM_POINTER;
		ADD 3 TO VRAM_POINTER;
		
		MCALL #SUB_SAFE_WRTVRM USING ,,VRAM_POINTER,0;
	EXIT;
	
	SUB_DRAW_STARS:
		MOVE 1 TO SKIP_DRAW;
		MOVE 0 TO LOOP_COUNTER;
		WHILE LOOP_COUNTER < 50;
			ENABLE INTERRUPTS;
			DO			
				ADD STICK_IN TO RANDWORK;
				MULTIPLY JIFFY BY RANDWORK GIVING RANDWORK;
				SUBTRACT JIFFY FROM RANDWORK;
				XOR RANDWORK WITH JIFFY;
				SUBTRACT STICK_IN FROM RANDWORK;
			UNTIL RANDWORK < ^h2FF;
			DISABLE INTERRUPTS;
			MOVE T32NAM TO VRAM_POINTER;
			ADD RANDWORK TO VRAM_POINTER;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,^h2E;
			ADD 1 TO LOOP_COUNTER;
		OD;	

		MOVE T32NAM TO VRAM_POINTER;
		MOVE #SCORE_MESSAGE TO SCORE_DIGIT_POINTER;
		
		
		WHILE SCORE_DIGIT_POINTER < #HISCORE_MESSAGE;
			MOVE @SCORE_DIGIT_POINTER TO SCORE_DIGIT;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,SCORE_DIGIT;
			ADD 1 TO VRAM_POINTER;
			ADD 1 TO SCORE_DIGIT_POINTER;
		OD;
		
		MOVE #HISCORE_MESSAGE TO SCORE_DIGIT_POINTER;
		ADD 20 TO VRAM_POINTER;
		
		WHILE SCORE_DIGIT_POINTER < #OLD_SCORE_STR;
			MOVE @SCORE_DIGIT_POINTER TO SCORE_DIGIT;
			MCALL BIOS_WRTVRM USING ,,VRAM_POINTER,SCORE_DIGIT;
			ADD 1 TO VRAM_POINTER;
			ADD 1 TO SCORE_DIGIT_POINTER;
		OD;
		
		CONVERT HISCORE TO DEC HISCORE_STR;
		MOVE 0 TO SKIP_DRAW;
	EXIT;
	
	BYTE SCORECHAR;
	STRING SCOREBUFFER 512;
	FILE FILE_HISCORE DISK TEXT RECORD SCORECHAR BUFFER SCOREBUFFER VALUE "HISCORE.BIN";
	
	SUB_LOAD_HISCORE:
		OPEN FILE_HISCORE;
		READ FILE_HISCORE;
		MOVE SCORECHAR TO HISCORE;
		MULTIPLY HISCORE BY ^h100;
		READ FILE_HISCORE;
		ADD SCORECHAR TO HISCORE;
		CLOSE FILE_HISCORE;
		MOVE HISCORE TO OLD_HISCORE;
	EXIT;
	
	SUB_SAVE_HISCORE:
		EXTERNAL BYTE HISCORE_LOW ADDRESS #HISCORE;
		EXTERNAL BYTE HISCORE_HI ADDRESS (#HISCORE + 1);
		
		MOVE 1 TO SKIP_DRAW;
		
		OPEN FILE_HISCORE OUTPUT;
		MOVE HISCORE_HI TO SCORECHAR;
		WRITE FILE_HISCORE;
		MOVE HISCORE_LOW TO SCORECHAR;
		WRITE FILE_HISCORE;
		CLOSE FILE_HISCORE;
		
		MOVE 0 TO SKIP_DRAW;
	EXIT;
	
	SUB_GET_TRIGGER:
		SWITCH ON INPUT_DEVICE:
			1, 2, 4:  MCALL BIOS_GTTRIG USING ,,,1 GIVING ,,,TRIGGER_IN;
			3: 	MCALL BIOS_GTTRIG USING ,,,0 GIVING ,,,TRIGGER_IN;
			5: 	BEGIN
					IF TRIGGER_IN > 0 THEN
						MOVE ^hFF TO TRIGGER_IN;
					ELSE
						MOVE ^h00 TO TRIGGER_IN;
					FI;
				END;
		ENDSWITCH;
	EXIT;
	
END;
